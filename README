FUNCTIONS 
A block of reusable code used to perform specific tasks 

Variables
Data Types
Operators
If statements
Data Structures
Loops 
Functions 


Why Use Functions?
1. Code Reusability
2. Modularity - breaking large codebase into smaller managaebale pieces or modules
3. Readability & Organization
4. Easier debugging - catch and solve errors betterr
5. Better scaling


Python functions -> syntax ->
def function_name:
    //function body


def add_numbers(a,b):   ---> function definition
def test_functions():
function defintion -> def keyword, 
                -> function signature(name of your function + whether the function has parameters   or not )

-> parameter - placeholder / temporary values
-> arguments - real values

add_numbers(number1,number2). -> function call -> pass arguments

function definition
function body
function call

functions are used with return keyword 
return keyword -> return some value from a function. && signify the end of a function


Global vs Local Variables 
Global Variable - a variable that can be accessed anywhere in the program
Local Variable - are variables that are only accessible in their local/block scope


Function 
Methods - functions attached to classes - OOP -Object Oriented Programming - classes and objects


Types of functions
1.Inbuilt functions - come with the progamming language and have predefined tasks e.g print()
2.user defined functions - created by the programmer - > def add_numbers():




1.Python - functions, lists ,tuples , data types
2.sql - queries 



Create a new project called MyDuka 
-main.py 
-database.py

-> Open a new terminal and run the following commands to install the packages below
1. pip install flask
2. pip install psycopg2-binary


Functions
A Function is a block of reusable code used to perform specific tasks


Variables
Data types
Operators
if statements
data structures
loops

functions

Why use Functions?
1. Reusability
2. Code organization and readability
3. Modularity - breaking large code into smaller manageable pieces or modules
4. Easier debugging - catch  errors better and faster

Types of Functions:
1.Inbuilt functions - come with the programming language and are meant to do specific predefined tasks
    -range() -print()
2.User-defined functions - are created by the user for their use - def calculate()

**parameter -> temporary/placeholder variables / values in the function
**return -> returns some value from a function call and signifies the end of a function
**arguments -> real values passed to a function when calling it

**Global variables - variables that are accessible from anywhere in the program
**Local variables - variables that are only accessible in their local / block scope


Internet - network of networks
web/www -> service that runs on the internet that enables us to connect to the internet
Uses http && https to run requests and transfer data

https://meet.google.com/dsh-idtb-oqb

http & https -> transfer protocols -> establish communication and transfer data over a network

http - not secure -packets / data can be tampered with
https - data encryption -> 

Server - a computer that accepts requests

Build your application
Host it on a server
Ip address is assigned to that application 

Ip address is a number used to uniquely identify a device on a network e.g 142.111.12.82
Domain - user friendly name attached to an ip aaddress used to identify devices / applications

Safaricom - build application - safaricom.co.ke
-host it on a server
-ip address assigned to application e.g  142.111.12.82
-attach a domain name to ip address -> www.google.com
DNS

Find an ip address using domain -> ping 



PSYCOPG2

Is a PostgreSQL adapater for Python . A driver - connects your Python code to a Postgres database

 psycopg2.connect(). - creates a connection between Python and a Postgres database


create database myduka_db;
\c myduka_db


insert into products(name,buying_price,selling_price)values('bread',50,60);

host -> where is my db located 
**localhost -> your computer/device  127.0.0.1

port -> where exactly on my device is the Postgres service running
**5432 -> default Postgres port

user & password -> used to authenticte a postgres user and grant them access to a Postgres database

dbname - Postgres database you're connecting to

cur -> object used to execute sql queries or perform db operations
cur.execute() -> executes an sql query

Insert 2 sales and view them using psycopg2

N/B:- List of tuples

insert into sales(pid,quantity)values(1,20);

CRUD 
C-Create  - Insert
R-Read.   - Select
U-Update. -Update
D-Delete. -Delete

double quote query

Object Oriented Programming - OOP

Data Types -
1.Inbuilt data types -> come with the programming language
-> int , float , str, boolean -primitive
-> lists, sets , tuples , dicts

2.user defined data types - created by the programmer
-> create classes (blueprints) then create objects from it
e.g. Create a data type called Person (class) then create Alvin(object) from Person
-classes are created using the class keyword

Class - a blueprint for creating objects 

Classes contain the following 2 things:
1.Attributes - data / variables -> what does a class have? e.g name, age
2.Behaviour  - functions (methods) - what a class can do? - walk, eat, talk

Method - a function inside a class

Constructor - a special method used to create and initialize objects

class - blueprint
object - an instance of a class

self - represents the current object / instance of the class


Task 
Create a BankAccount class
Have a constructor to initalize the account with account number , balance , owner_name
Have the methods:
1. deposit() 
2. withdraw()
3. display_info()
create 2 BankAccounts that can deposit, withdraw and display info


Task2
Create a Student class
It should have the following attributes:
 -student_id -name -email -course
 It should have the following methods:
 - enroll_course()
 - drop_course()
 - set_grade()
-  display_info()
Create 2 student objects who can do all of the above


#inheritance


Task3
Create a Car Class
Have the following attributes
- brand - model - year -fuel_capcity - fuel_level -is_running(boolen value)
Have the methods
- start()
- stop()
- refuel()
- drive()
- display_car_info()

1.Inheritance
2.Encapsulation
3.Abstraction ->
4.Polymorphism -> Method Overriding
*Method overriding, method overloading, operator overloding , aggregation , association


FLASK
A python framework used to build web applications

Framework vs Library?

Concept -Building A House
Scenario 1 - Framework
Feisal wants to build a house.he recognizes that he isnt an expert in building / construction. He decides to enlist 
the help of construction professionals (architect, engineer, pm , construction workers). These professionals each play a role in building the house and they make the process easier since they have experience. But for successful construction, Feisal has to follow the strict guidelines as laid out by these professionals e.g the house has to have a strong foundation / walls must be built using bricks 
Note -> easier process but strict guidelines


Scenario 2 - Library
Stephen wants to build a house. He decides he doesnt need the help of construction professionals,instead he decides to build the house
from sratch himself. He has to to design , correct, know and purchase all materials himself. Since he oversees the entire process he doesnt need to follow ny guideline or timeline. He's solely in charge of everything.
Note-> The process is flexible but very hard


Framework -> prebuilt structure of code ,tools, libraies that provides a foundation for building applications. It provided prebuilt and reusable code so that developers dont have to build from scratch
-> Has very strict guidelines on usage

Examples:
Python -> Flask, FastAPI, Django
Java -> Spring
C# -> .NET
NodeJS -> Express
Ruby -> Ruby on Rails
Golang -> Gin

FLASK
1.Routing
-> A mechanism to map / connect URLs to Python functions -> system for resource navigation -> connects a URL to a function in your Flask app

URl -> full address used to access resources on the web
https://meet.google.com/dsh-idtb-oqb
->In flask routing is defined using a decorator function -> @app.route()
-> Decorator is a function that allows you to modify the behaviour of another function -> usually have the @ prefix 
-> @app.route() has some parameters:
1.rule or path -> the path a user accesses on the browser
2. methods

https://meet.google.com/dsh-idtb-oqb

https://techcamp.co.ke/
https://techcamp.co.ke/contact-us
https://techcamp.co.ke/certifications
default route -> index route -> /



@app.route('/') -> decorator function
def home():   -> view function
    return "My index route"


Render or return a full html page
To render Html pages with Flask we use a function: render_template() which is imported from flask
To return a html page with render_template() you MUST have the following structure:

MYDUKA
templates
    -> all html files must be here
    -index.html
    -products.html
    -sales.html
    -stock.html
    -dashboard.html
    -register.html
    -login.html
static
    -> all css , js and all static files
    -> static files - images , videos , favicons, icons
database.py
main.py